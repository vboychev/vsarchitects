<?php

/**
 * @file
 * Module file for the menu_subtitle module.
 */

/**
 * Implements hook_help().
 */
function menu_subtitle_help($path) {
   switch ($path) {
    case 'admin/help#menu_subtitle':
      return '<p>' . t('Menu Subtitle adds a new field to menu items to set a subtitle to show on menu links! Actualy it should work on primary/secondary menu and normal menu items.<br />To install it follow the drupal.org ' . l(t('guidelines'), 'http://drupal.org/documentation/install/modules-themes/modules-7') . '.<br />To use it go to menu administration page at ' . l(t('admin/structure/menu'), 'admin/structure/menu') . '. Than add or edit a menu item. You will find a new field called <em>"Subtitle"</em> where you can optionaly set a string to show as subtitle on the menu link.') . '</p>';
    case 'admin/structure/menu':
      return '<p>' . t('Menu Subtitle adds a new field to menu items to set a subtitle to show on menu links! Actualy it should work on primary/secondary menu and normal menu items. To use it add or edit a menu item. You will find a new field called <em>"Subtitle"</em> where you can optionaly set a string to show as subtitle on the menu link.') . '</p>';
  }
}

/**
 * Implements hook_form_alter().
 */
function menu_subtitle_form_menu_edit_item_alter(&$form, $form_state, $form_id) {
  if (isset($form['mlid']['#value']) && is_numeric($form['mlid']['#value'])) {
    $query = db_select('menu_subtitle', 'ms');
    $query->fields('ms', array('subtitle', 'position', 'link'));
    $query->condition('ms.mlid', $form['mlid']['#value']);
    if ($item = $query->execute()->fetchAssoc()) {
      $subtitle = $item['subtitle'];
      $position = $item['position'];
      $link = $item['link'];
    }
  }

  $form["link_title"]['#weight'] = -2;

  $form["menu_subtitle"] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu subtitle'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form["menu_subtitle"]["menu_subtitle_text"] = array(
    '#type' => 'textfield',
    '#title' => t('Subtitle'),
    '#default_value' => (isset($subtitle) ? $subtitle : ''),
    '#description' => t('Set a subtitle for the menu link.'),
  );

  $form["menu_subtitle"]["menu_subtitle_position"] = array(
    '#type' => 'select',
    '#title' => t('Position'),
    '#default_value' => (isset($position) ? $position : 0),
    '#description' => t('The subtitle position. Select where you want to show it, above or below the title link.'),
    '#options' => array(0 => t('Below'), 1 => t('Above')),
    '#required' => TRUE,
  );

  $form["menu_subtitle"]["menu_subtitle_print_as_link"] = array(
    '#type' => 'checkbox',
    '#title' => t('Print as link'),
    '#default_value' => (isset($link) ? $link : 1),
    '#description' => t('If this is checked, the subtitle is printed as link.'),
  );

  if (!is_array($form['#submit'])) {
    $form['#submit'] = array();
  }
  $form['#submit'][] = 'menu_subtitle_form_submit';
}

/**
 * Process the submitted form.
 */
function menu_subtitle_form_submit($form, &$form_state) {
  $subtitle = ($form_state['values']['menu_subtitle_text'] ? $form_state['values']['menu_subtitle_text'] : '');
  $position = $form_state['values']['menu_subtitle_position'];
  $link = $form_state['values']['menu_subtitle_print_as_link'];
  $mlid = $form_state['values']['mlid'];

  $query = db_select('menu_subtitle', 'ms');
  $query->fields('ms', array('mlid'));
  $query->condition('ms.mlid', $mlid);

  if ($item = $query->execute()->fetchAssoc()) {
    db_update('menu_subtitle')->fields(array(
      'subtitle' => $subtitle,
      'position' => $position,
      'link' => $link,
    ))->condition('mlid', $mlid)->execute();
  }
  else {
    db_insert('menu_subtitle')
      ->fields(array(
        'mlid' => $mlid,
        'subtitle' => $subtitle,
        'position' => $position,
        'link' => $link,
      ))
      ->execute();
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function menu_subtitle_theme_registry_alter(&$registry) {
  if (!empty($registry['menu_link'])) {
    $registry['menu_link']['function'] = 'menu_subtitle_menu_link';
  }

  if (!empty($registry['links'])) {
    $registry['links']['function'] = 'menu_subtitle_links';
  }
}

/**
 * This is the modified version of the default theme_menu_link() function.
 */
function menu_subtitle_menu_link(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  $query = db_select('menu_subtitle', 'ms');
  $query->fields('ms', array('subtitle', 'position', 'link'));
  $query->condition('ms.mlid', $element['#original_link']['mlid']);

  if ($item = $query->execute()->fetchAssoc()) {
    $subtitle = $item['subtitle'];
    $subtitle_position = $item['position'];
    $subtitle_link = $item['link'];
  }

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }

  $output = '';
  if (isset($subtitle_position) && $subtitle_position == 0) {
    $output .= '<span class="menu-link-title">' . l($element['#title'], $element['#href'], $element['#localized_options']) . '</span>';
    if (!empty($subtitle)) {
      if ($subtitle_link == 0) {
        $span_attributes = '';
        if (isset($element['#localized_options']['attributes']['class'])) {
          $subtitle_attributes['attributes']['class'] = $element['#localized_options']['attributes']['class'];
          $span_attributes = drupal_attributes($subtitle_attributes['attributes']);
          $span_attributes = str_replace('class="', 'class="menu-link-subtitle menu-link-subtitle-below ', $span_attributes);
        }
        else {
          $span_attributes = 'class="menu-link-subtitle menu-link-subtitle-below"';
        }

        $output .= '<span ' . $span_attributes . '>' . $subtitle . '</span>';
      }
      else {
        $output .= '<span class="menu-link-subtitle menu-link-subtitle-below">' . l($subtitle, $element['#href'], $element['#localized_options']) . '</span>';
      }
    }
  }
  elseif (isset($subtitle_position) && $subtitle_position == 1) {
    if (!empty($subtitle)) {
      if ($subtitle_link == 0) {
        $span_attributes = '';
        if (isset($element['#localized_options']['attributes']['class'])) {
          $subtitle_attributes['attributes']['class'] = $element['#localized_options']['attributes']['class'];
          $span_attributes = drupal_attributes($subtitle_attributes['attributes']);
          $span_attributes = str_replace('class="', 'class="menu-link-subtitle menu-link-subtitle-above ', $span_attributes);
        }
        else {
          $span_attributes = 'class="menu-link-subtitle menu-link-subtitle-above"';
        }

        $output .= '<span ' . $span_attributes . '>' . $subtitle . '</span>';
      }
      else {
        $output .= '<span class="menu-link-subtitle menu-link-subtitle-below">' . l($subtitle, $element['#href'], $element['#localized_options']) . '</span>';
      }
    }
    $output .= '<span class="menu-link-title">' . l($element['#title'], $element['#href'], $element['#localized_options']) . '</span>';
  }
  else {
    $output .= l($element['#title'], $element['#href'], $element['#localized_options']);
  }
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * This is the modified version of the default theme_links() function (this is the function used to theme Primary and Secondary links).
 */
function menu_subtitle_links($variables) {
  global $language_url;
  $links = $variables['links'];
  $attributes = $variables['attributes'];
  $heading = $variables['heading'];
  $output = '';

  if (count($links) > 0) {
    $output = '';

    // Treat the heading first if it is present to prepend it to the
    // list of links.
    if (!empty($heading)) {
      if (is_string($heading)) {
        // Prepare the array that will be used when the passed heading
        // is a string.
        $heading = array(
          'text' => $heading,
          // Set the default level of the heading.
          'level' => 'h2',
        );
      }
      $output .= '<' . $heading['level'];
      if (!empty($heading['class'])) {
        $output .= drupal_attributes(array('class' => $heading['class']));
      }
      $output .= '>' . check_plain($heading['text']) . '</' . $heading['level'] . '>';
    }

    $output .= '<ul' . drupal_attributes($attributes) . '>';

    $num_links = count($links);
    $i = 1;

    foreach ($links as $key => $link) {
      $class = array($key);

      $mlid = (int)(substr($key, 5));

      if (is_integer($mlid)) {
        $query = db_select('menu_subtitle', 'ms');
        $query->fields('ms', array('subtitle', 'position', 'link'));
        $query->condition('ms.mlid', $mlid);
        if ($item = $query->execute()->fetchAssoc()) {
          $subtitle = $item['subtitle'];
          $subtitle_position = $item['position'];
          $subtitle_link = $item['link'];
        }
      }

      // Add first, last and active classes to the list of links to help out themers.
      if ($i == 1) {
        $class[] = 'first';
      }
      if ($i == $num_links) {
        $class[] = 'last';
      }
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page())) && (empty($link['language']) || $link['language']->language == $language_url->language)) {
        $class[] = 'active';
      }
      $output .= '<li' . drupal_attributes(array('class' => $class)) . '>';

      if (isset($link['href'])) {
        // Pass in $link as $options, they share the same keys.
        if ($item && $subtitle_position == 0) {
          $output .= '<span class="menu-link-title">' . l($link['title'], $link['href'], $link) . '</span>';
          if (!empty($subtitle)) {
            if ($subtitle_link == 0) {
              $span_attributes = '';
              if (isset($link['attributes']['class'])) {
                $subtitle_attributes['attributes']['class'] = $link['attributes']['class'];
                $span_attributes = drupal_attributes($subtitle_attributes['attributes']);
                $span_attributes = str_replace('class="', 'class="menu-link-subtitle menu-link-subtitle-below ', $span_attributes);
              }
              else {
                $span_attributes = 'class="menu-link-subtitle menu-link-subtitle-below"';
              }

              $output .= '<span ' . $span_attributes . '>' . $subtitle . '</span>';
            }
            else {
              $output .= '<span class="menu-link-subtitle menu-link-subtitle-below">' . l($subtitle, $link['href'], $link) . '</span>';
            }
          }
        }
        elseif ($item && $subtitle_position == 1) {
          if (!empty($subtitle)) {
            if ($subtitle_link == 0) {
              $span_attributes = '';
              if (isset($link['attributes']['class'])) {
                $subtitle_attributes['attributes']['class'] = $link['attributes']['class'];
                $span_attributes = drupal_attributes($subtitle_attributes['attributes']);
                $span_attributes = str_replace('class="', 'class="menu-link-subtitle menu-link-subtitle-below ', $span_attributes);
              }
              else {
                $span_attributes = 'class="menu-link-subtitle menu-link-subtitle-below"';
              }

              $output .= '<span ' . $span_attributes . '>' . $subtitle . '</span>';
            }
            else {
              $output .= '<span class="menu-link-subtitle menu-link-subtitle-above">' . l($subtitle, $link['href'], $link) . '</span>';
            }
          }
          $output .= '<span class="menu-link-title">' . l($link['title'], $link['href'], $link) . '</span>';
        }
        else {
          $output .= l($link['title'], $link['href'], $link);
        }
      }

      $i++;
      $output .= "</li>\n";
    }

    $output .= '</ul>';
  }

  return $output;
}
